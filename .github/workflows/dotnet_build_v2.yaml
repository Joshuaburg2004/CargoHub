# This workflow will build or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
  pull_request:
    branches: ["main", "development"]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on:
      ubuntu-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    #updates the project to use the most recent version
    env:
      Solution_Name: CargoHubAspNet.sln
      Test_Project_Path: ./IntegrationTests/IntegrationTestsV2/IntegrationTests.csproj
      Unit_Test_Project_Path: ./UnitTesting/UnitTestsV2/MyUnitTestProjectV2.csproj
      Wap_Project_Directory: CargoHubAlt
      Wap_Project_Path: ./CargoHubAlt/CargoHubAlt.csproj

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}

      - name: Build all projects
        run: |
          dotnet build ${{ env.Solution_Name }} --no-restore --configuration ${{ matrix.configuration }}

  run-unit-tests-v2:
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'development'))
    runs-on: ubuntu-latest

    env:
      Solution_Name: ${{ github.workspace }}/CargoHubAspNet.sln
      Test_Project_Path: ${{ github.workspace }}/UnitTesting/UnitTestsV2/MyUnitTestProjectV2.csproj
      Wap_Project_Directory: ${{ github.workspace }}/CargoHubAlt
      Wap_Project_Path: ${{ github.workspace }}/CargoHubAlt/CargoHubAlt.csproj
      Test_Project_dll: ${{ github.workspace }}/UnitTesting/UnitTestsV2/bin/Debug/net8.0/CargoHubAlt.dll
      Coverage_Report_Folder: ${{ github.workspace }}/TestResults/coverageAction
      Results_Directory: ${{ github.workspace }}/TestResults/unitTestResults
      Minimum_Code_Coverage: ${{ vars.MINIMUMCODECOVERAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}

      - name: Call webhook on startup
        run: |
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            URL=$PR_URL
          else
            URL=$COMMIT_URL
          fi
          curl -X POST -H "Content-Type: application/json" -d '{"text":"Unit tests are running for ${GITHUB_EVENT_NAME} by ${GITHUB_ACTOR}. See details at $URL"}' ${{ secrets.WEBHOOK_URL }}

      - name: Execute tests
        id: run_tests
        run: |
          dotnet test ${{ env.Test_Project_Path }} --configuration Debug --logger "trx;LogFileName=testresults.trx" --results-directory ${{ env.Results_Directory }}

      - name: Call webhook on success
        if: success()
        run: |
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            URL=$PR_URL
          else
            URL=$COMMIT_URL
          fi
          curl -X POST -H "Content-Type: application/json" -d '{"text":"Unit tests passed for ${GITHUB_EVENT_NAME} by ${GITHUB_ACTOR}. See details at $URL"}' ${{ secrets.WEBHOOK_URL }}

      - name: Call webhook on failure
        if: failure()
        run: |
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            URL=$PR_URL
          else
            URL=$COMMIT_URL
          fi
          curl -X POST -H "Content-Type: application/json" -d '{"text":"Unit tests failed for ${GITHUB_EVENT_NAME} by ${GITHUB_ACTOR}. See details at $URL. Failure details: $(cat ${{ env.Results_Directory }}/testresults.trx)"}' ${{ secrets.WEBHOOK_URL }}

      - name: Run tests with coverage
        run: |
          mkdir -p ${{ env.Coverage_Report_Folder }}
          dotnet tool install --global coverlet.console
          coverlet ${{ env.Test_Project_dll }} --target "dotnet" --targetargs "test ${{ env.Test_Project_Path }} --no-build --nologo" --output "${{ env.Coverage_Report_Folder }}/coverage" --format cobertura --exclude=\"${{env.Wap_Project_Directory}}/Authentication\"

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:${{ env.Coverage_Report_Folder }}/coverage.cobertura.xml -targetdir:${{ env.Coverage_Report_Folder }} -reporttypes:TextSummary

  run-integration-tests-v2:
    needs: build
    if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'development') || github.event_name == 'push'
    runs-on: ubuntu-latest

    env:
      Solution_Name: ${{ github.workspace }}/CargoHubAspNet.sln
      Test_Project_Path: ${{ github.workspace }}/IntegrationTests/IntegrationTestsV2/IntegrationTests.csproj
      Wap_Project_Directory: ${{ github.workspace }}/CargoHubAlt
      Wap_Project_Path: ${{ github.workspace }}/CargoHubAlt/CargoHubAlt.csproj
      Test_Project_dll: ${{ github.workspace }}/IntegrationTests/bin/Debug/net8.0/CargoHubAlt.dll
      Coverage_Report_Folder: ${{ github.workspace }}/TestResults/coverageAction
      Results_Directory: ${{ github.workspace }}/TestResults/integrationTestResults
      Minimum_Code_Coverage: ${{ vars.MINIMUMCODECOVERAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t integrationtest .
      
      - name: Call webhook on startup
        run: |
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            URL=$PR_URL
          else
            URL=$COMMIT_URL
          fi
          curl -X POST -H "Content-Type: application/json" -d '{"embeds":{"title": "Integration tests are running for ${GITHUB_EVENT_NAME} by ${GITHUB_ACTOR}", "description": "See details at $URL."}}' ${{ secrets.WEBHOOK_URL }}

      - name: Run Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/TestResults:/testresults \
            -v ${{ github.workspace }}/Data:/app/Data \
            -e Solution_Name=/app/CargoHubAspNet.sln \
            -e Test_Project_Path=/app/IntegrationTests/IntegrationTestsV1/IntegrationTests.csproj \
            integrationtest \
            dotnet test /app/IntegrationTests/IntegrationTestsV1/IntegrationTests.csproj \
            --results-directory /testresults --verbosity detailed

      - name: Call webhook on success
        if: success()
        run: |
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            URL=$PR_URL
          else
            URL=$COMMIT_URL
          fi
          curl -X POST -H "Content-Type: application/json" -d '{"embeds":{"title": "Integration tests failed for ${GITHUB_EVENT_NAME} by ${GITHUB_ACTOR}", "description": "See details at $URL. Failure details: $(cat ${{ env.Results_Directory }}/testresults.trx)"}}' ${{ secrets.WEBHOOK_URL }}

      - name: Call webhook on failure
        if: failure()
        run: |
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            URL=$PR_URL
          else
            URL=$COMMIT_URL
          fi
          curl -X POST -H "Content-Type: application/json" -d '{"embeds":{"title": "Integration tests failed for ${GITHUB_EVENT_NAME} by ${GITHUB_ACTOR}", "description": "See details at $URL. Failure details: $(cat ${{ env.Results_Directory }}/testresults.trx)"}}' ${{ secrets.WEBHOOK_URL }}