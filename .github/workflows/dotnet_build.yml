# This workflow will build or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
    branches: [ "main", "development", "329-pipeline-test-opzetten" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # setup environment variables
    env:
      Solution_Name: CargoHubAspNet.sln                        
      Test_Project_Path: IntegrationTests\IntegrationTests.csproj               
      Wap_Project_Directory: CargoHubAlt   
      Wap_Project_Path: CargoHubAlt\CargoHubAlt.csproj                   

    #updates the project to use the most recent version
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore


  test:
    needs: build
    runs-on: ubuntu-latest

    env:
      Solution_Name: CargoHubAspNet.sln                        
      IntegrationTest_Project_Path: IntegrationTests\IntegrationTests.csproj  
      UnitTest_Project_Path: NaN


    steps:
      - name: Execute integration tests
        run: dotnet test ${{env.IntegrationTest_Project_Path}}


      - name: Run tests with coverage
        run: |
          dotnet test --no-build --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=./TestResults/coverage/
  
      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:TestResults/coverage/coverage.cobertura.xml \
            -targetdir:TestResults/CoverageReport \
            -reporttypes:HtmlInline
  
      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          COVERAGE=$(grep 'line-rate' TestResults/coverage/coverage.cobertura.xml | sed 's/.*line-rate="\([^"]*\)".*/\1/')
          echo "Coverage: $COVERAGE"
          echo "coverage=$COVERAGE" >> $GITHUB_ENV
  
   