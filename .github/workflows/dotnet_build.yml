# This workflow will build or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
    branches: [ "main", "development", "329-pipeline-test-opzetten" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # setup environment variables
    env:
      Solution_Name: CargoHubAspNet.sln                        
      Test_Project_Path: .\IntegrationTests\IntegrationTests.csproj               
      Wap_Project_Directory: CargoHubAlt   
      Wap_Project_Path: .\CargoHubAlt\CargoHubAlt.csproj
      Test_Project_dll: .\IntegrationTests\bin\Debug\net8.0\CargoHubAlt.dll   
      Coverage_Report_Folder:

    #updates the project to use the most recent version
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore

    - name: Execute integration tests
      run: dotnet test --no-build


    - name: Run tests with coverage
      run: |
        mkdir ${{env.Coverage_Report_Folder}}
        dotnet tool install --global coverlet.console
        coverlet ${{env.Test_Project_dll}}  --target "dotnet" --targetargs "test --no-build --nologo" --output "${{env.Coverage_Report_Folder}}/coverage" --format cobertura

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports: ${{env.Coverage_Report_Folder}}/coverage.cobertura.xml -targetdir: ${{env.Coverage_Report_Folder}} -reporttypes:TextSummary

    - name: Extract coverage percentage
      id: extract-coverage
      run: |
        echo "$(grep 'Line coverage' -h ${{env.Coverage_Report_Folder}}/Summary.txt | sed 's/.*line-rate="\([^"]*\)".*/\1/')"


  test:
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug]

    env:
      Solution_Name: CargoHubAspNet.sln                        
      IntegrationTest_Project_Path: .\IntegrationTests\IntegrationTests.csproj  
      UnitTest_Project_Path: NaN


    steps:

    #updates the project to use the most recent version
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: Execute integration tests
        run: dotnet test --no-build
    
      



  
   