# This workflow will build or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
  pull_request:
    branches: ["main", "development"]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on:
      ubuntu-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    #updates the project to use the most recent version
    env:
      Solution_Name: CargoHubAspNet.sln
      Test_Project_Path: ./IntegrationTests/IntegrationTests.csproj
      Unit_Test_Project_Path: ./UnitTesting/MyUnitTestProject.csproj
      Wap_Project_Directory: CargoHubAlt
      Wap_Project_Path: ./CargoHubAlt/CargoHubAlt.csproj

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}

      - name: Build all projects
        run: |
          dotnet build ${{ env.Solution_Name }} --no-restore --configuration ${{ matrix.configuration }}

  run-integration-tests:
    needs: build
    if: github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'development') || github.event_name == 'push'
    runs-on: ubuntu-latest

    env:
      Solution_Name: ${{ github.workspace }}/CargoHubAspNet.sln
      Test_Project_Path: ${{ github.workspace }}/IntegrationTests/IntegrationTests.csproj
      Wap_Project_Directory: ${{ github.workspace }}/CargoHubAlt
      Wap_Project_Path: ${{ github.workspace }}/CargoHubAlt/CargoHubAlt.csproj
      Test_Project_dll: ${{ github.workspace }}/IntegrationTests/bin/Debug/net8.0/CargoHubAlt.dll
      Coverage_Report_Folder: ${{ github.workspace }}/TestResults/coverageAction
      Results_Directory: ${{ github.workspace }}/TestResults/integrationTestResults
      Minimum_Code_Coverage: ${{ vars.MINIMUMCODECOVERAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
  
      - name: Build Docker image
        run: |
          docker build -t dockerfile  .
  
      - name: Run Docker container with SQLite
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/TestResults:/testresults \
            -v ${{ github.workspace }}/Data:/app/Data \
            -e Solution_Name=/app/CargoHubAspNet.sln \
            -e Test_Project_Path=/app/IntegrationTests/IntegrationTests.csproj \
            integration-test

      - name: Run tests with coverage
        run: |
          mkdir -p ${{ env.Coverage_Report_Folder }}
          dotnet tool install --global coverlet.console
          coverlet ${{ env.Test_Project_dll }} --target "dotnet" --targetargs "test ${{ env.Test_Project_Path }} --no-build --nologo" --output "${{ env.Coverage_Report_Folder }}/coverage" --format cobertura --exclude=\"${{env.Wap_Project_Directory}}/Authentication\"

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:${{ env.Coverage_Report_Folder }}/coverage.cobertura.xml -targetdir:${{ env.Coverage_Report_Folder }} -reporttypes:TextSummary

  run-unit-tests:
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'development'))
    runs-on: ubuntu-latest

    env:
      Solution_Name: ${{ github.workspace }}/CargoHubAspNet.sln
      Test_Project_Path: ${{ github.workspace }}/UnitTesting/MyUnitTestProject.csproj
      Wap_Project_Directory: ${{ github.workspace }}/CargoHubAlt
      Wap_Project_Path: ${{ github.workspace }}/CargoHubAlt/CargoHubAlt.csproj
      Test_Project_dll: ${{ github.workspace }}/UnitTesting/bin/Debug/net8.0/CargoHubAlt.dll
      Coverage_Report_Folder: ${{ github.workspace }}/TestResults/coverageAction
      Results_Directory: ${{ github.workspace }}/TestResults/unitTestResults
      Minimum_Code_Coverage: ${{ vars.MINIMUMCODECOVERAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}

      - name: Execute tests
        run: |
          dotnet test ${{ env.Test_Project_Path }} --configuration Debug --logger "trx;LogFileName=testresults.trx" --results-directory ${{ env.Results_Directory }}

      - name: Run tests with coverage
        run: |
          mkdir -p ${{ env.Coverage_Report_Folder }}
          dotnet tool install --global coverlet.console
          coverlet ${{ env.Test_Project_dll }} --target "dotnet" --targetargs "test ${{ env.Test_Project_Path }} --no-build --nologo" --output "${{ env.Coverage_Report_Folder }}/coverage" --format cobertura --exclude=\"${{env.Wap_Project_Directory}}/Authentication\"

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:${{ env.Coverage_Report_Folder }}/coverage.cobertura.xml -targetdir:${{ env.Coverage_Report_Folder }} -reporttypes:TextSummary

  # deploy:
  #   if: github.ref == 'refs/head/main'
  #   runs-on: ubuntu-latest
  #   needs: [build, run-unit-tests, run-integration-tests]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name:
