# This workflow will build or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
    branches: [ "main", "development", "329-pipeline-test-opzetten" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  testjob1:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"
  testtjob2:
    runs-on: ubuntu-latest
    needs: testjob1
    steps:
      - env:
          OUTPUT1: ${{needs.testjob1.outputs.output1}}
          OUTPUT2: ${{needs.testjob1.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"

      - name: Set the value
        id: step_one
        run: |
          "action_state=yellow" >> "$GITHUB_ENV"
      - name: Use the value
        id: step_two
        run: |
          printf '%s\n' "$action_state" # This will output 'yellow'


      - name: Set environment variable
        run: echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV

      - name: Use environment variable
        run: |
          echo "The value of MY_ENV_VAR is $MY_ENV_VAR"





    

  build:
    strategy:
      matrix:
        configuration: [Debug]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    # setup environment variables
    env:
      Solution_Name: CargoHubAspNet.sln
      Test_Project_Path: .\IntegrationTests\IntegrationTests.csproj
      Wap_Project_Directory: CargoHubAlt
      Wap_Project_Path: .\CargoHubAlt\CargoHubAlt.csproj
      Test_Project_dll: .\IntegrationTests\bin\Debug\net8.0\CargoHubAlt.dll
      Coverage_Report_Folder: .\TestResults\coverageAction
      Minimum_Code_Coverage: ${{vars.MINIMUMCODECOVERAGE}}
    outputs:
      CODE_COVERAGE_ACTUAL_OUTPUT: ${{ steps.extract_coverage.outputs.CODE_COVERAGE_TRY }}



    #updates the project to use the most recent version
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore

    - name: Execute integration tests
      run: dotnet test --no-build


    - name: Run tests with coverage
      run: |
        mkdir ${{env.Coverage_Report_Folder}}
        dotnet tool install --global coverlet.console
        coverlet ${{env.Test_Project_dll}}  --target "dotnet" --targetargs "test --no-build --nologo" --output "${{env.Coverage_Report_Folder}}\coverage" --format cobertura

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:${{env.Coverage_Report_Folder}}\coverage.cobertura.xml -targetdir:${{env.Coverage_Report_Folder}} -reporttypes:TextSummary


    - name: Extract coverage percentage
      id: extract_coverage
      run: |
        echo "CODE_COVERAGE_TRY = $(grep -w 'Line coverage:' ${{env.Coverage_Report_Folder}}\Summary.txt | awk '{print $3}' | tr -d '%')" >> $GITHUB_OUTPUT
        
        echo "CODE_COVERAGE_ACTUAL=$(grep -w 'Line coverage:' ${{env.Coverage_Report_Folder}}\Summary.txt)" >> $GITHUB_ENV
        printf '%s\n' "$CODE_COVERAGE_ACTUAL" # This will output 'Line coverage: percent'
        echo "$CODE_COVERAGE_ACTUAL this is annoying"
        echo "second line works"





  extract_Coverage:
    runs-on: ubuntu-latest
    needs: build
    env:
      Coverage_Report_Folder: .\TestResults\coverageAction
      Minimum_Code_Coverage: ${{vars.MINIMUMCODECOVERAGE}}
      CODE_COVERAGE_ACTUAL: ${{ needs.build.outputs.CODE_COVERAGE_ACTUAL_OUTPUT }}

    steps:

    - name: Print if code coverage is higher than minimum
      id: Print_coverage_success

      if: ${{env.CODE_COVERAGE_ACTUAL}} >= ${{env.Minimum_Code_Coverage}}
      run: |
        echo $CODE_COVERAGE_ACTUAL
        echo "code coverage is higher than ${{env.Minimum_Code_Coverage}}"


    - name: Fail if code coverage insufficient
      id: Coverage_test

      if: ${{env.CODE_COVERAGE_ACTUAL}} <= ${{env.Minimum_Code_Coverage}}
      run: |
        echo ${{env.CODE_COVERAGE_ACTUAL}}
        echo "code coverage is lower than ${{env.Minimum_Code_Coverage}}"
        exit 1
